When would you want to use a remote repository rather than keeping all your work local?

So you can have a copy of your work safely stored and backed up in the cloud.


Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

Other people could be making changes to the remote repo and you may not be ready to absorb
them yet.  Manually pulling allows you to decide when you want to integrate with another
branch.


Describe the differences between forks, clones, and branches. When would you use one
instead of another?

Forks create a copy within github of another repository on github.  The forked repository
references the original repository and maintains its commit history.  Clones are also copies of 
repositories, but they have parent/child relationships.  Changes to cloned repositories can be
pushed into the parent whereas changes to forked repos cannot be pushed into the original repo.
Branches are new commit streams within a single repository.  They allow work to progress within
the repo without affecting the master branch.


What is the benefit of having a copy of the last known state of the remote stored locally?

Having a copy of the last known state locally allows the remote to proceed without having
to merge these changes.  You can see how your changes compare to master as of the time of 
the last pull.


How would you collaborate without using Git or GitHub? What would be easier, and what would
be harder?

You could have a shared directory on dropbox that contained all of the files.  You could keep
a list of files that were "checked out" to keep others from editing them at the same time.  This 
would prevent the need for merging.  When you were ready to "check in", you could copy your directory
to dropbox and have others review the changes.  You would have to list what the changes were in a file
somewhere.  This would be possible, but it would be very slow as only one person could work on a file
at a time.  You could allow simulateneous edits, but then you would manually have to find file changes
and do possible merging.  What a nightmare!


When would you want to make changes in a separate branch rather than directly in master? What
benefits does each approach have?

I would almost always make changes in a separate branch.  It gives you flexibility to work on
multiple logical changes at once without having the changes mixed together.  You can react to 
an urgent bug while working on a new feature more easily.  With branching, you know your master 
branch is always pristine.  I might directly update master for small typo changes that have essentially
no chance of causing a bug.