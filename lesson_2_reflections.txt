What happens when you initialize a repository? Why do you need to do it?

Creates the metadata database that git will use to track revisions.  It is
the preparatory step for making commits.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The working directory contains all files in your project while the staging area
contains only the changed files you wish group together as a logical change.  
The repository is essentially a history of changes to the files in your 
project.  The staging area allows to to create a set of file changes that 
represent one logical change to your project.


How can you use the staging area to make sure you have one commit per logical change?

You can incrementally add files as you're making changes and then commit the files
as one logical change when ready.  You can add as many or as few changes to a commit
as you want.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches are useful when trying out experimental features.  You could try specific
features in multiple branches and then combine them later to see how they interact.
Also, your history in master is unaffected by experimental changes in other branches.


How do the diagrams help you visualize the branch structure?

Diagrams help visualize which commits will be included within a branch.  They also
show the various logical changes that you have in progress at any one time.


What is the result of merging two branches together? Why do we represent it in the
diagram the way we do?

The result is a single commit that includes the changes from both branches.  This
single commit resides in the branch that is currently checked out.  The commit
has two parents as represented in the diagram.

